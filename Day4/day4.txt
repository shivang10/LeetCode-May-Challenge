https://leetcode.com/explore/challenge/card/may-leetcoding-challenge/534/week-1-may-1st-may-7th/3319/


1st Solution is to write the binary representation of the number and reverse the bits. The calculate the required number through the binary representation

class Solution {
public:
    int findComplement(int num) {
        int i, tmp, p = 0, n, ans = 0;
        vector<int> v;
        tmp = num;
        while(tmp!=0)
        {
            v.push_back(tmp%2 == 0 ? 1 : 0);
            tmp/=2;
        }
        n = v.size();
        for(i = 0; i<n; i++)
        {
            ans+=(v[i]*pow(2, p));
            p++;
        }
        return ans;
    }
};


2nd Solution is using BitMasking. Form a number with binary representation as 1, 11, 111... and so on. The number of bits in this must be equal to the number of bits in the given number. Then we perform XOR operation with both the numbers and the resultant is the answer.

class Solution {
public:
    int bitwiseComplement(int num) {
        int n = 1;
        while(n < num)
            n = (n<<1) + 1;
        return n^num;
    }
};